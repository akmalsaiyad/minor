
package minor1;

import javax.swing.JOptionPane;

/**
 *
 * @author Lenovo
 */
public class Amount extends javax.swing.JFrame {
public static int amount;
    /**
     * Creates new form Amount
     */
    public Amount() {
        initComponents();
        int amountlimit1 = new UserTransaction().checkWithdrawLimit();
        JOptionPane.showMessageDialog(this, "YOUR DAILY WITHDRAW LIMIT IS 10,000/-\nYOU CAN WITHDRAW "+ amountlimit1+"/- MORE!!!\nTHIS AMOUNT RESETS IN 24 HOURS");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Navlb = new javax.swing.JLabel();
        amountTF = new javax.swing.JTextField();
        confirmBtn = new javax.swing.JToggleButton();
        gobackBtn = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        Navlb.setBackground(new java.awt.Color(0, 204, 204));
        Navlb.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        Navlb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Navlb.setText("Enter Amount To Withdraw");
        Navlb.setOpaque(true);

        amountTF.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        amountTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        amountTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountTFActionPerformed(evt);
            }
        });
        amountTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                amountTFKeyTyped(evt);
            }
        });

        confirmBtn.setBackground(new java.awt.Color(0, 204, 204));
        confirmBtn.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        confirmBtn.setText("Confirm");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        gobackBtn.setBackground(new java.awt.Color(0, 204, 204));
        gobackBtn.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        gobackBtn.setText("Go back");
        gobackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gobackBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Navlb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(amountTF, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(confirmBtn)
                        .addGap(18, 18, 18)
                        .addComponent(gobackBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(Navlb, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(amountTF, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(confirmBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(gobackBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void amountTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountTFKeyTyped
        // TODO add your handling code here:
        char ch = evt.getKeyChar();
        if(!(Character.isDigit(ch))){
                evt.consume();
        }
    }//GEN-LAST:event_amountTFKeyTyped

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed
        // TODO add your handling code here:
         String amounts=  amountTF.getText();
        if(amounts.equals("")){
                                JOptionPane.showMessageDialog(this, "MUST ENTER SOME AMOUNT!!!");
                                amountTF.setFocusable(true);
        }
       

        else{
                UserTransaction ut =new UserTransaction();
                    int balance = ut.checkBalance();
                    int withdrawlimit = ut.checkWithdrawLimit();
                     amount = Integer.parseInt(amountTF.getText());
                     if(amount>withdrawlimit){
                          JOptionPane.showMessageDialog(this, "YOU CAN WITHDRAW ONLY "+ withdrawlimit+"/- MORE!!!");                     
                     amountTF.setText("");
                     }
                     else{
                    if(amount>balance){
                                    JOptionPane.showMessageDialog(this, "YOU CANNOT MAKE THIS TRANSACTION\n!!! ACCOUNT BALANCE IS:  "+balance);
                                    amountTF.setText("");
                    }
                    else{
                                    JOptionPane.showMessageDialog(this, "YOU ARE ABOUT TO WITHDRAW  " + amount + " and your account balance is "+balance);
                                    JOptionPane.showMessageDialog(this, "ADMIN/OWNER MUST LOGIN TO CONFIRM PAYMENT!!!");
                                   this.setVisible(false);
                                    new Login("withdraw",amount).setVisible(true);
                           }
                     System.out.println(amount);
        }}

                       /*  to confirm that the user gets money from the owner/admin we can add one more frame:
                        1ST WAY
                        your withdraw from account is successful 
                        press confirm button only when you receive cash in hand 
                        AFTER THAT ONLY OWNER/ADMIN WILL RECEIVE MONEY FROM BANK
                        [CONFIRM] with a timer of 1 min else the complete transaction will fail
                        
                        2ND WAY
                        TO HAVE A BIOMETRIC CONFIRMATION ON BOTH END
                        USER SHOULD CONFIRM IT WHILE TAKING MONEY AND ADMIN SHOULD DO THE SAME WHILE GIVING MONEY;
                        
                        */
                        
        
    }//GEN-LAST:event_confirmBtnActionPerformed

    private void gobackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gobackBtnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new UserHome().setVisible(true);
    }//GEN-LAST:event_gobackBtnActionPerformed

    private void amountTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountTFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Amount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Amount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Amount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Amount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Amount().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Navlb;
    private javax.swing.JTextField amountTF;
    private javax.swing.JToggleButton confirmBtn;
    private javax.swing.JToggleButton gobackBtn;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
